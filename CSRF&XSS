### CSRF (Cross Site Request Forgery)

웹 어플리케이션 취약점 중 하나로, 인터넷 사용자가 자신의 의지와는 무관하게 공격자가 의도한 행위(수정, 삭제, 등록 등)을 특정 웹사이트에 요청하게 만드는 공격.

사용자의 권한을 도용하여 중요 기능 실행 하도록 하는 것이지만, CSRF는 사용자 컴퓨터를 감염시키거나 서버를 해킹해서 하는 공격은 아님.

### CSRF 공격이 이뤄지는 조건

- 위조 요청을 전송하는 서비스에 사용자가 로그인을 한 상황

AND

- 해커가 만든 피싱 사이트에 접속한 상황.
- 해커가 XSS 공격을 성공시킨 사이트에 접속한 상황.

### CSRF 공격 예시

```
<form action="http://facebook.com/api/content" method="post">
	<input type="hidden" name="body" value="응모하기" />
	<input type="submit" value="Click Me"/>
</form>
```

피싱 사이트에서 위와 같은 form 태그를 사용하여, 페이스북에 글을 게시하는 코드를 심어 놓고, form을 submit 하도록 유도. 

이 때, 사용자의 페이스북이 자동 로그인이 되어 있으면 클릭하는 즉시 글이 게시됨.

### CSRF 방어 기법

- **Referrer 검증**
    - Back-end 단에서 request의 referrer을 확인하여 domain이 일치하는 지 검증하는 방법.
    - 일반적으로는 referrer 검증만으로 대부분의 CSRF 공격을 방어함.
    - 하지만 같은 도메인 내의 페이지에 XSS 취약점이 있는 경우 CSRF 공격에 취약해질 수 있음.
    - domain 단위 검증에서 좀 더 세밀하게 페이지 단위까지 일치하는 지 검증을 하면 도메인 내의 타 페이지에서 XSS 취약점에 의한 CSRF  공격을 방어할 수 있음.

- **Security Token 사용**
    - 사용자의 세션에 임의의 난수 값을 저장하고 사용자의 요청 마다 해당 난수 값을 포함 시켜 전송.
    - 이후 Back-end 단에서 요청을 받을 때마다 세션에 저장된 토큰 값과 요청 파라미터에 전달되는 토큰 값이 일치하는 지 검증.
    - 이 방법 또한 XSS 취약점이 있다면 CSRF 공격에 취약해짐.

- **Double Submit Cookie 검증**
    - Security Token 검증의 한 종류로 세션을 사용할 수 없는 환경에서 사용할 수 있는 방법.
    - 웹브라우저의 Same Origin 정책으로 인해 자바스크립트에서 타 도메인의 쿠키 값을 확인/수정하지 못한다는 것을 이용한 방어 기법.
    - 스크립트 단에서 요청 시 난수 값을 생성하여 쿠키에 저장하고 동일한 난수 값을 요청 파라미터(혹은 헤더)에도 저장하여 서버로 전송,
    - 서버단에서는 쿠키의 토큰 값와 파라미터의 토큰 값이 일치하는 지만 검사.
    - 피싱 사이트에서는 도메인이 달라 쿠키에 값을 저장하지 못하므로 가능하게 된 방어 기법.

### XSS

Cross site scripting, 

CSS가 맞는 약자지만, Cascading Style Sheets의 약자로 사용되고 있어 XSS라 함.

XSS는 게시판, 웹 메일 등에 스크립트와 같은 코드를 삽입하여 개발자가 고려하지 않은 기능을 작동하게 하는 치명적인 공격;

대부분의 웹 해킹 공격 기법과는 다르게, 클라이언트를 대상으로 하는 공격임.

### XSS의 종류

- **Reflected XSS**
    - 공격자가 미리 XSS 공격에 취약한 웹사이트를 탐색, XSS 공격을 위한 스크립트를 포함한 URL을 사용자에게 노출.
    - 해당 URL을 클릭할 경우, 취약한 웹 사이트의 서버에 스크립트가 포함 된 URL을 통해 요청을 전송하고, 서버는 스크립트를 포함한 응답을 전송함.
    
- **Stored XSS**
    - Reflected XSS와는 달리 게시판에 스크립트를 삽입하는 공격 방식.
    - 공격자가 스크립트를 심은 코드를 게시하고, 사용자가 게시글을 확인함으로써 URL에 대한 요청을 서버에 전송함.
    - 서버에서 스크립트를 포함한 응답을 전송하며 공격이 수행됨.

- **DOM Based XSS**
    - 사용자의 브라우저에서 DOM환경을 수정하여, 사용자 측의 코드가 예상치 못한 방식으로 공격 구문이 실행되는 공격.
    - 페이지 자체는 변경되지 않지만, 페이지에 포함된 사용자 측 코드는 DOM 환경에서 발생한
        
        악의적인 변조로 인한 공격 구문 실행.
