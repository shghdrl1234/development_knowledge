### PWA란?

Progressive Web Application은 Web과 mobile Apps 기술의 장점을 결합한 Web 기술로, mobile Web에서 Native Apps과 유사한 사용자 경험을 제공하는 web Application.

- Native Apps : mobile에 최적화된 언어로 개발된 Apps이며 android와 ios 같은 특정 플랫폼을 위해 만들어진 Apps.
    
    → 특정 플랫폼에 최적화 되어있어 안정적이며 실행 속도가 빠름. 
    
    → 플랫폼에서 제공하는 다양한 API 사용이 가능.
    

but, 플랫폼에 한정적이라는 단점, 각 플랫폼에 맞는 apps를 제작해야 하기 때문에 많은 시간과 비용을 투자 해야한다.

- Web apps : Web은 URL을 통해 쉽게 접근이 가능하며, 언제, 어디서, 누구나 장치를 사용하여 쉽게 접근 가능하다는 것이 큰 장점이며 별도의 설치가 필요하지 않음.
    
     → HTML과 CSS, JS 등을 사용해 만들어진 Application.
    
     → mobile Web의 특징과 Native Apps의 장점을 갖고 있어 설치 없이 URL을 통해 브라우저로 
    
    접근이 가능하고 홈 화면에 바로 가기 아이콘을 추가하여 Native Apps처럼 사용 가능.
    

but, 네트워크가 연결되어 있지 않은 오프라인 상태에서는 사용이 어려우며, 카메라와 같은 하드웨어에 접근 할 수 없고 플랫폼 내의 API를 사용할 수 없다는 단점이 있다.

![참고 자료 - 1](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2b7210e1-6355-49b6-8d2b-c622db7171c9/Untitled.png)

참고 자료 - 1

- 이러한 Apps들의 장점들을 결합한 것이 PWA이다.
- 위 그래프에서 Web Apps는 비교적 접근성이 높지만 기능성이 떨어지고, Native Apps는 기능성이 높지만, 접근성이 떨어진다.

   (PWA의 그래프 위치는 Narive Apps 보다는 낮고, Web Apps 보다는 왼쪽에 위치 하는게 맞다.)

### PWA가 되기 위한 핵심 조건

- 검색 가능성
    
     → 검색 엔진에서 보다 잘 노출되고 표현 되는 것. 분류 및 순위 지정이 더 쉬워짐.
    
- 설치성
    
    → 사용자가 홈 화면에 apps 아이콘을 표시하고 탭하여 기본 플랫폼과 잘 통합된 고유 컨테이너로 apps를 실행 시킬 수 있는 것.
    
- 연결 가능성
    
    → 복잡한 설치 과정 없이 특정 URL에서 Apps에 연결 할 수 있는 기능.
    
- 네트워크 독립성
    
    → 네트워크가 불안정 하거나 존재하지 않는 경우에도 작동 가능.
    
    - service worker, cache API 등의 기능을 조합하여 가능해짐.
    
- 점진적 향상 지원
    
    → 가능한 많은 사용자에게 필수 콘텐츠와 기능을 제공하기 위한 설계 철학. 나아가 필요한 모든 코드를 실행할 수 있는 최신 브라우저 사용자에게 최상의 경험을 제공.
    
- 재참여 가능성
    
    → 푸시 알림 등을 통하여 사용자가 apps를 보거나, 장치를 사용하지 않을 때에도 업데이트 및 컨텐츠에 쉽게 참여할 수 있다는 것.
    
    - Web 푸시 API, 알림 API와 같은 기술을 사용.
    
- 민감도
    
    → 반응형 Web Apps는 미디어 쿼리 및 뷰포트와 같은 기술을 사용하여, UI가 데스크 탑, 모바일, 태블릿 등 사용자의 장치에 적합한 크기로 나타남.
    
- 안정성
    
    → 스누핑을 방지하는 동시에 컨텐츠가 변조되지 않았는지 확인하는 보안 전달 메커니즘 제공
