Set 인터페이스는 순서가 없는 데이터 집합이고 데이터 중복을 허용하지 않는다.

Set은 ArrayList처럼 인덱스가 따로 존재하지 않아 iterator(반복자)를 사용해야한다.
LinkedList도 순서는 있지만 인덱스가 없으므로 iterator를 사용해야함.

Set<String> set = ...;

Iterator<String> iterator = set.iterator();

Set 컬렉션에는 HashSet, LinkedHashSet, TreeSet 등이 있다.

■ HashSet
HashSet은 Set인터페이스의 구현 클래스이다. HashSet을 생성하기 위해서는 다음과 같이
기본 생성자를 호출하면 된다.

Set<E> set = new HashSet<E>();

특징으로는 
빠른 접근속도를 가지고 있지만, 순서를 알 수 없다.
동일한 객체는 중복으로 저장하지 않는다.
객체를 저장하기 전에 객체의 hashcode() 메서드를 호출하여 해시코드를 얻어낸다.
하나의 null 값만 저장할 수 있다.

HashSet은 객체를 저장하기 전에 먼저 객체의 hashCode() 메서드를 호출해서 해시 코드를 얻어낸 다음
저장되어 있는 객체들의 해시 코드와 비교한 뒤 같은 해시 코드가 있다면 다시 equals() 메서드로 두 객체를 비교해서 true가 나오면 동일한 객체로 판단하고 중복 저장을 하지 않는다.
 
문자열을 HashSet에 저장할 경우, 같은 문자열을 갖는 String 객체는 동일한 객체로 간주되고, 다른 문자열을 갖는 String객체는 다른 객체로 간주되는데, 그 이유는 String 클래스가 hashCode()와 equals() 메서드를 재정의해서 같은 문자열일 경우 hashCode()의 리턴 값을 같게, equals()의 리턴 값은 true가 나오게 하였다.



■ LinkedHashSet : 추가된 순서대로 접근 가능하다.

■ TreeSet : 정렬 방법을 지정할 수 있다.
-이진 탐색 트리 구조로 되어있다.


