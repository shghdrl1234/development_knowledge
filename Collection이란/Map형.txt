Map 컬렉션은 키(key)와 쌍(pair)로 구성된 Entity 객체를 저장하는 구조를 가지고 있다.
여기서 키와 값은 모두 객체이다. 키는 중복 저장될 수 없지만, 값은 중복될 수 있다.
만약 기존에 저장된 키와 동일한 키로 값을 저장하게되면 기존의 값은 없어지고, 새로운 값으로 대치된다.

주요 특징으로는
- 모든 데이터는 키와 값이 존재한다.
- 키 없이 값만 저장할 수 없다.
- 값 없이 키만 저장할 수 없다.
- 키는 해당 Map에서 고유해야만 한다.
- 값은 Map에서 중복되어도 전혀 상관없다.
- 데이터 추가 순서는 중요하지 않다. (데이터를 저장한 순서대로 결과가 출력되지 않는다.)

Map 컬렉션에는 HashMap, Hashtable, LinkedHahsMap, Properties, TreeMap 등이 있다.

■ HashMap
HashMap은 Map 인터페이스를 구현한 대표적인 Map 컬렉션이다.
HasMap의 키로 사용할 객체는 hashCode()와 equals() 메서드를 재정의해서 동등 객체가 될 조건을 정해야한다.
동등 객체, 즉 동일한 키가 될 조건은 hashCode()의 리턴값이 같아야하고, equals() 메서드가 true를 리턴해야한다.

대부분 HashMap 객체를 생성할 때에는 매개 변수가 없는 생성자를 사용한다. 하지만 HashMap에 담을 데이터의 개수가 많을 경우에는 초기 크기를 지정해주는 것을 권장한다.

HashMap을 print하게되면 {}로 묶어서 Map 전체의 키와 값이 출력된다.
특정 키와 값을 가져오고 싶다면 get(key)를 사용하면 되고, 전체를 출력하고 싶으면 entrySet() 등의 메서드를 활용하여 Map의 객체를 반환받은 후 출력하면 된다.

HashMap<string,string> map = new HashMap<String,String>();

■ TreeMap
TreeMap은 이진 트리를 기반으로 한 Map 컬렉션이다. 
TreeSet과의 차이점은 키와 값이 저장된 MapEntry를 저장한다는 점이다.
TreeMap 클래스는 키와 값을 저장하는 동시에 키를 정렬한다.
숫자 타입일 경우 값으로, 문자열 타입일 경우 유니코드로 저장된다.

TreeMap은 일반적으로 Map으로써의 성능이 HashMap 보다 떨어진다, TreeMap은 데이터를 저장할 때 즉시 정렬하기에 추가나 삭제가 HashMap보다 오래 걸린다. 하지만 정렬된 상태로 Map을 유지해야 하거나 정렬된 데이터를 조회해야 하는 범위 검색이 필요한 경우 TreeMap을 사용하는 것이 효율성면에서 좋다. 

TreeMap<String, String> treeMap = new TreeMap<String, String>();